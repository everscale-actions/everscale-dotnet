@page "/counter"
@using EverscaleNet.Abstract
@using EverscaleNet.Client.Models
@using EverscaleNet.Models
@using Blazored.LocalStorage

<h1>Counter</h1>

<p>
	<label>
		Seed phrase:
		<input id="phrase" value="@Phrase" @onchange="@PhraseChanged" size="80"/>
	</label>
</p>
<p>
	<label>
		Calculator address:
		<input id="address" value="@Address" readonly size="80"/>
	</label>
</p>
<p>
	<label>
		Balance: @(Balance?.ToString("F"))
	</label>
</p>
<p>
	<label>
		Count: @Count
	</label>
</p>
<button disabled="@(!ReadyToCount)" @onclick="@Increment">Increment</button>
<button disabled="@(!ReadyToCount)" @onclick="@Decrement">Decrement</button>

@if (Error != null) {
	<p>
		<label>
			Error: @Error
		</label>
	</p>
}

@code {

	Calculator Calculator { get; set; }

	[Inject]
	IEverClient EverClient { get; set; }

	[Inject]
	IEverPackageManager PackageManager { get; set; }

	[Inject]
	ILocalStorageService LocalStorageService { get; set; }

	protected override async Task OnInitializedAsync() {
		Phrase = await LocalStorageService.GetItemAsStringAsync("Calculator_Phrase");
		Phrase ??= (await EverClient.Crypto.MnemonicFromRandom(new ParamsOfMnemonicFromRandom())).Phrase;
		await PhraseChanged(new ChangeEventArgs { Value = Phrase });
	}

	public string Phrase { get; set; }

	private async Task Increment() {
		Counting = true;
		try {
			await Calculator.Add(1);
			await UpdateCountAndBalance();
			Error = null;
		} catch (Exception e) {
			Error = e.Message;
		} finally {
			Counting = false;
		}
	}

	private async Task Decrement() {
		Counting = true;
		try {
			await Calculator.Subtract(1);
			await UpdateCountAndBalance();
			Error = null;
		} catch (Exception e) {
			Error = e.Message;
		} finally {
			Counting = false;
		}
	}

	private async Task UpdateCountAndBalance() {
		Count = await Calculator.GetSum();
		Balance = await Calculator.GetBalance();
	}

	private bool Counting { get; set; }
	private bool Checking { get; set; }
	public string Address { get; set; }
	public string Error { get; set; }
	public long Count { get; set; }

	private async Task PhraseChanged(ChangeEventArgs obj) {
		Checking = true;
		StateHasChanged();
		Phrase = obj.Value!.ToString();
		try {
			_keyPair = await EverClient.Crypto.MnemonicDeriveSignKeys(new ParamsOfMnemonicDeriveSignKeys { Phrase = Phrase });
			Calculator = new Calculator(EverClient, PackageManager);
			await Calculator.Init(_keyPair);
			Address = Calculator.Address;
			await LocalStorageService.SetItemAsStringAsync("Calculator_Phrase", Phrase);
			AccountType accountType = await Calculator.GetAccountType();
			switch (accountType) {
				case AccountType.Frozen:
					throw new Exception("Calculator contract has been frozen");
				case AccountType.NonExist when await Calculator.GetBalance() < 1M:
				case AccountType.Active when await Calculator.GetBalance() < 1M:
				case AccountType.Uninit when await Calculator.GetBalance() < 1M:
					throw new Exception("Balance to low, send 1 or more Evers to address");
				case AccountType.Uninit:
				case AccountType.NonExist:
					await Calculator.Deploy();
					break;
				case AccountType.Active:
					break;
				default:
					throw new Exception("Unknown contact state/type");
			}
			await UpdateCountAndBalance();
			Checking = false;
			Error = null;
		} catch (Exception e) {
			Count = 0;
			Balance = null;
			Error = e.Message;
		}
	}

	public bool ReadyToCount => !Checking && !Counting;

	public decimal? Balance { get; set; }

	private KeyPair _keyPair;
}
