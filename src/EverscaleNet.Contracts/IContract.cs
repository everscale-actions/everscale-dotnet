using System.Threading;
using System.Threading.Tasks;
using EverscaleNet.Client.Models;
using EverscaleNet.Exceptions;
using EverscaleNet.Models;

namespace EverscaleNet;

/// <summary>
///     Main
/// </summary>
public interface IContract {
	/// <summary>
	///     Contract address, should be generated by .ctor or InitByPublicKey
	/// </summary>
	/// <exception cref="NotInitializedException"></exception>
	string Address { get; }

	/// <summary>
	/// </summary>
	/// <param name="publicKey">if null will be read from keypair field or keypair file</param>
	/// <param name="cancellationToken"></param>
	Task Init(string? publicKey = null, CancellationToken cancellationToken = default);

	/// <summary>
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns></returns>
	/// <exception cref="ContractNotDeployedException"></exception>
	Task<decimal> GetBalance(CancellationToken cancellationToken = default);

	/// <summary>
	///     call constructor function of contract
	/// </summary>
	/// <param name="parameters"></param>
	/// <param name="cancellationToken"></param>
	/// <returns>deployment fee</returns>
	Task<TransactionFees> Deploy(object? parameters = null, CancellationToken cancellationToken = default);

	/// <summary>
	///     Try to find contract in blockchain
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns>Returns true if the contract exists</returns>
	Task<AccountType?> GetAccountType(CancellationToken cancellationToken = default);
}
