using System.Threading;
using System.Threading.Tasks;
using EverscaleNet.Abstract;
using EverscaleNet.Client.Models;
using EverscaleNet.Exceptions;
using EverscaleNet.Models;
using EverscaleNet.Serialization;
using EverscaleNet.Utils;

namespace EverscaleNet;

/// <inheritdoc />
public abstract class ContractBase : IContract {
	private readonly IEverClient _client;
	private readonly IEverPackageManager _packageManager;
	private Abi? _abi;
	private string? _address;
	private KeyPair? _keyPair;
	private string? _tvc;

	/// <summary>
	/// </summary>
	/// <param name="client"></param>
	/// <param name="packageManager"></param>
	/// <param name="address">Put address or InitByPublicKey</param>
	/// <param name="keyPair"></param>
	protected ContractBase(IEverClient client, IEverPackageManager packageManager, string? address = null, KeyPair? keyPair = null) {
		_client = client;
		_packageManager = packageManager;
		_address = address;
		_keyPair = keyPair;
	}

	/// <summary>
	/// </summary>
	protected abstract string Name { get; }

	/// <summary>
	///     Contract address, should be generated by .ctor or InitByPublicKey
	/// </summary>
	/// <exception cref="NotInitializedException"></exception>
	public string Address => _address ?? throw new NotInitializedException();

	/// <summary>
	/// </summary>
	/// <param name="publicKey">if null will be read from keypair field or keypair file</param>
	/// <param name="cancellationToken"></param>
	public async Task Init(string? publicKey = null, CancellationToken cancellationToken = default) {
		publicKey ??= (await GetKeyPair(cancellationToken)).Public;
		Task<Abi> getAbiTask = GetAbi(cancellationToken);
		Task<string> getTvcTask = GetTvc(cancellationToken);
		await Task.WhenAll(getAbiTask, getTvcTask);
		var paramsOfEncodeMessage = new ParamsOfEncodeMessage {
			Abi = getAbiTask.Result,
			DeploySet = new DeploySet { Tvc = getTvcTask.Result },
			Signer = new Signer.External { PublicKey = publicKey }
		};
		ResultOfEncodeMessage resultOfEncodeMessage = await _client.Abi.EncodeMessage(paramsOfEncodeMessage, cancellationToken);
		_address = resultOfEncodeMessage.Address;
	}

	/// <summary>
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns></returns>
	/// <exception cref="ContractNotDeployedException"></exception>
	public async Task<decimal> GetBalance(CancellationToken cancellationToken = default) {
		ResultOfQueryCollection result = await _client.Net.QueryCollection(new ParamsOfQueryCollection {
			Collection = "accounts",
			Filter = new { id = new { eq = Address } }.ToJsonElement(),
			Result = "balance(format: DEC)",
			Limit = 1
		}, cancellationToken);

		if (result.Result.Length == 0) {
			throw new ContractNotDeployedException();
		}

		return result.Result[0].Get<string>("balance").NanoToCoins();
	}

	/// <summary>
	///     call constructor function of contract
	/// </summary>
	/// <param name="parameters"></param>
	/// <param name="cancellationToken"></param>
	/// <returns>deployment fee</returns>
	public async Task<TransactionFees> Deploy(object? parameters = null, CancellationToken cancellationToken = default) {
		var deployParams = new ParamsOfEncodeMessage {
			Abi = await GetAbi(cancellationToken),
			DeploySet = new DeploySet { Tvc = await GetTvc(cancellationToken) },
			CallSet = new CallSet {
				FunctionName = "constructor",
				Input = parameters?.ToJsonElement()
			},
			Signer = new Signer.Keys { KeysAccessor = _keyPair }
		};
		ProcessAndWaitInternalMessagesResult process = await _client.ProcessAndWaitInternalMessages(deployParams, cancellationToken);
		return process.ProcessingFees!;
	}

	/// <summary>
	/// Try to find contract in blockchain
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns>Returns true if the contract exists</returns>
	public async Task<AccountType?> GetAccountType(CancellationToken cancellationToken = default) {
		ResultOfQueryCollection result = await _client.Net.QueryCollection(new ParamsOfQueryCollection {
			Collection = "accounts",
			Filter = new { id = new { eq = Address } }.ToJsonElement(),
			Result = "acc_type",
			Limit = 1
		}, cancellationToken);

		return result.Result.Length == 1
			       ? result.Result[0].Get<AccountType>("acc_type")
			       : null;
	}

	/// <summary>
	///     Get tvc of contract
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns>tvc string of code</returns>
	protected async Task<string> GetTvc(CancellationToken cancellationToken) {
		return _tvc ??= await _packageManager.LoadTvc(Name, cancellationToken);
	}

	/// <summary>
	///     Get contract Abi
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns></returns>
	protected async Task<Abi> GetAbi(CancellationToken cancellationToken) {
		return _abi ??= await _packageManager.LoadAbi(Name, cancellationToken);
	}

	/// <summary>
	///     Get contract Abi
	/// </summary>
	/// <param name="cancellationToken"></param>
	/// <returns></returns>
	protected async Task<KeyPair> GetKeyPair(CancellationToken cancellationToken) {
		return _keyPair ??= await _packageManager.LoadKeyPair(Name, cancellationToken);
	}
}
