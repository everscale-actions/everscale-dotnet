name: Main workflow

concurrency:
  group: ${{ github.ref }}-ci
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOTNET_NOLOGO: true
  GITHUB_FEED: https://nuget.pkg.github.com/ch1seL/
  GITHUB_USER: ch1seL
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NUGET_FEED: https://api.nuget.org/v3/index.json
  NUGET_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  build:
    if: github.event_name != 'release'
    name: Build, test and pack
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Run Node SE
        run: docker run -d --name tonlab-node -e USER_AGREEMENT=yes -p5555:80 tonlabs/local-node
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            3.x
            5.x
            6.x
            7.x
      
      - name: Restore
        run: dotnet restore -v normal --locked-mode
      
      - name: Build
        run: dotnet build -c Release --no-restore -v normal -ds -m

      - name: Wait for Node SE
        run: |
          wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
          chmod +x wait-for-it.sh
          ./wait-for-it.sh -s -t 120 localhost:5555
      
      - name: Test
        timeout-minutes: 10
        env:
          EVERSCALE_NETWORK_ENDPOINTS: http://localhost:5555
        run: |
          dotnet test --no-build -c Release --logger "console;verbosity=normal" --logger "trx;LogFilePrefix=results" -m:1
      
      - name: Test Report
        uses: phoenix-actions/test-reporting@v8
        id: test-report
        if: ${{ success() || failure() }}
        with:
          name: Tests Report
          path: '**/*.trx'
          reporter: dotnet-trx
          list-suites: failed
          list-tests: failed
      
      - name: Pack
        if: github.event_name != 'pull_request'
        run: |
          dotnet pack -v normal -c Release --no-restore --no-build --include-symbols --include-source -p:PackageVersion=${GITHUB_RUN_ID: -9} -o pack
      
      - name: Upload Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: nupkg
          path: ./pack/*.nupkg
  
  prerelease:
    needs: build
    if: github.event_name != 'release' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: nupkg
      - name: Push to GitHub Feed
        run: |
          for f in ./nupkg/*.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done
  
  deploy:
    #    disabled to fast deploy :)
    #    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Create Release NuGet package
        run: |
          arrTag=(${GITHUB_REF//\// })
          VERSION="${arrTag[2]}"
          echo Version: $VERSION
          VERSION="${VERSION//v}"
          echo Clean Version: $VERSION
          dotnet pack -v normal -c Release --include-symbols --include-source -p:PackageVersion=$VERSION -o nupkg -m:1       
      - name: Push to GitHub Feed
        working-directory: nupkg
        run: |
          for f in *.nupkg
          do
            curl -vX PUT -u "$GITHUB_USER:$GITHUB_TOKEN" -F package=@$f $GITHUB_FEED
          done           
      - name: Push to NuGet Feed
        working-directory: nupkg
        run: |
          for f in *.nupkg
          do
            echo $f
            dotnet nuget push $f --source $NUGET_FEED --skip-duplicate --api-key $NUGET_KEY            
          done
